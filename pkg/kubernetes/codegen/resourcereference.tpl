// Code generated by helmit-generate. DO NOT EDIT.

package {{ .Reference.Package.Name }}

import (
    "github.com/wangxn2015/helmit/pkg/kubernetes/resource"
    {{- $resource := .Resource }}
    {{- range $ref := $resource.References }}
    {{- if not (eq $ref.Reference.Package.Path $resource.Package.Path) }}
    {{ $ref.Reference.Package.Alias }} {{ $ref.Reference.Package.Path | quote }}
    {{- end }}
    {{- end }}
    {{- if .Resource.References }}
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	{{- end }}
    {{- if .Resource.References }}
	"context"
	{{- end }}
)

type {{ .Reference.Types.Interface }} interface {
    {{ .Resource.Names.Plural }}() {{ .Reader.Types.Interface }}
    {{- range $ref := .Resource.References }}
    {{- if eq $ref.Resource.Package.Path $resource.Package.Path }}
    {{ $ref.Reference.Types.Interface }}
    {{- else }}
    {{ $ref.Reference.Package.Alias }}.{{ $ref.Reference.Types.Interface }}
    {{- end }}
    {{- end }}
}

func New{{ .Reference.Types.Interface }}(resources resource.Client, filter resource.Filter) {{ .Reference.Types.Interface }} {
    {{- if .Resource.References }}
    var ownerFilter resource.Filter = func(kind metav1.GroupVersionKind, meta metav1.ObjectMeta) (bool, error) {
        {{- $name :=  (.Resource.Names.Plural | toLowerCamel) }}
        list, err := New{{ .Reader.Types.Interface }}(resources, filter).List(context.Background())
        if err != nil {
            return false, err
        }
		for _, owner := range meta.OwnerReferences {
            for _, {{ $name }} := range list {
                if {{ $name }}.Object.ObjectMeta.UID == owner.UID {
                    return true, nil
                }
            }
        }
        return false, nil
    }
    {{- end }}
	return &{{ .Reference.Types.Struct }}{
		Client: resources,
		filter: filter,
        {{- range $ref := $resource.References }}
        {{- if eq $ref.Resource.Package.Path $resource.Package.Path }}
        {{ $ref.Reference.Types.Interface }}: New{{ $ref.Reference.Types.Interface }}(resources, ownerFilter),
        {{- else }}
        {{ $ref.Reference.Types.Interface }}: {{ $ref.Reference.Package.Alias }}.New{{ $ref.Reference.Types.Interface }}(resources, ownerFilter),
        {{- end }}
        {{- end }}
	}
}

type {{ .Reference.Types.Struct }} struct {
	resource.Client
	filter resource.Filter
    {{- range $ref := .Resource.References }}
    {{- if eq $ref.Resource.Package.Path $resource.Package.Path }}
    {{ $ref.Reference.Types.Interface }}
    {{- else }}
    {{ $ref.Reference.Package.Alias }}.{{ $ref.Reference.Types.Interface }}
    {{- end }}
    {{- end }}
}

func (c *{{ .Reference.Types.Struct }}) {{ .Resource.Names.Plural }}() {{ .Reader.Types.Interface }} {
    return New{{ .Reader.Types.Interface }}(c.Client, c.filter)
}
